// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_parallelDistance
Rcpp::NumericVector cpp_parallelDistance(arma::mat& x, Rcpp::List arguments);
RcppExport SEXP _CaseBasedReasoning_cpp_parallelDistance(SEXP xSEXP, SEXP argumentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type arguments(argumentsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_parallelDistance(x, arguments));
    return rcpp_result_gen;
END_RCPP
}
// cpp_parallelDistanceXY
Rcpp::NumericVector cpp_parallelDistanceXY(arma::mat& x, arma::mat& y, Rcpp::List arguments);
RcppExport SEXP _CaseBasedReasoning_cpp_parallelDistanceXY(SEXP xSEXP, SEXP ySEXP, SEXP argumentsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type arguments(argumentsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_parallelDistanceXY(x, y, arguments));
    return rcpp_result_gen;
END_RCPP
}
// cpp_order_matrix
arma::umat cpp_order_matrix(arma::mat& x, const int sortDirection, int k);
RcppExport SEXP _CaseBasedReasoning_cpp_order_matrix(SEXP xSEXP, SEXP sortDirectionSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type sortDirection(sortDirectionSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_order_matrix(x, sortDirection, k));
    return rcpp_result_gen;
END_RCPP
}
// cpp_order_vector
arma::uvec cpp_order_vector(arma::vec x, const int sortDirection, int k);
RcppExport SEXP _CaseBasedReasoning_cpp_order_vector(SEXP xSEXP, SEXP sortDirectionSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type sortDirection(sortDirectionSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_order_vector(x, sortDirection, k));
    return rcpp_result_gen;
END_RCPP
}
// cpp_terminalNodeID
arma::vec cpp_terminalNodeID(arma::mat& x, arma::vec& childNodes1, arma::vec& childNodes2, arma::vec& splitValues, arma::vec& splitVarIds);
RcppExport SEXP _CaseBasedReasoning_cpp_terminalNodeID(SEXP xSEXP, SEXP childNodes1SEXP, SEXP childNodes2SEXP, SEXP splitValuesSEXP, SEXP splitVarIdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type childNodes1(childNodes1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type childNodes2(childNodes2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type splitValues(splitValuesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type splitVarIds(splitVarIdsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_terminalNodeID(x, childNodes1, childNodes2, splitValues, splitVarIds));
    return rcpp_result_gen;
END_RCPP
}
// cpp_TerminalNodeDistance
Rcpp::DataFrame cpp_TerminalNodeDistance(arma::umat& nodeIDs);
RcppExport SEXP _CaseBasedReasoning_cpp_TerminalNodeDistance(SEXP nodeIDsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type nodeIDs(nodeIDsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_TerminalNodeDistance(nodeIDs));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CaseBasedReasoning_cpp_parallelDistance", (DL_FUNC) &_CaseBasedReasoning_cpp_parallelDistance, 2},
    {"_CaseBasedReasoning_cpp_parallelDistanceXY", (DL_FUNC) &_CaseBasedReasoning_cpp_parallelDistanceXY, 3},
    {"_CaseBasedReasoning_cpp_order_matrix", (DL_FUNC) &_CaseBasedReasoning_cpp_order_matrix, 3},
    {"_CaseBasedReasoning_cpp_order_vector", (DL_FUNC) &_CaseBasedReasoning_cpp_order_vector, 3},
    {"_CaseBasedReasoning_cpp_terminalNodeID", (DL_FUNC) &_CaseBasedReasoning_cpp_terminalNodeID, 5},
    {"_CaseBasedReasoning_cpp_TerminalNodeDistance", (DL_FUNC) &_CaseBasedReasoning_cpp_TerminalNodeDistance, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_CaseBasedReasoning(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
