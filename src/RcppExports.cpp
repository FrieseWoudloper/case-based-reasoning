// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// weighted_knn
Rcpp::List weighted_knn(arma::mat x, arma::mat query, arma::vec weights, const int sortDirection, const int k);
RcppExport SEXP Similarity_weighted_knn(SEXP xSEXP, SEXP querySEXP, SEXP weightsSEXP, SEXP sortDirectionSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type query(querySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const int >::type sortDirection(sortDirectionSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_knn(x, query, weights, sortDirection, k));
    return rcpp_result_gen;
END_RCPP
}
// getOrderMatrix
arma::umat getOrderMatrix(arma::mat& x, int sortDirection, int k);
RcppExport SEXP Similarity_getOrderMatrix(SEXP xSEXP, SEXP sortDirectionSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type sortDirection(sortDirectionSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(getOrderMatrix(x, sortDirection, k));
    return rcpp_result_gen;
END_RCPP
}
// getOrderVector
arma::uvec getOrderVector(arma::vec x, int sort_direction, int k);
RcppExport SEXP Similarity_getOrderVector(SEXP xSEXP, SEXP sort_directionSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type sort_direction(sort_directionSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(getOrderVector(x, sort_direction, k));
    return rcpp_result_gen;
END_RCPP
}
// weightedDistanceCPP
arma::vec weightedDistanceCPP(arma::mat& x, arma::rowvec& weights);
RcppExport SEXP Similarity_weightedDistanceCPP(SEXP xSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedDistanceCPP(x, weights));
    return rcpp_result_gen;
END_RCPP
}
// weightedDistanceCPPNM
arma::vec weightedDistanceCPPNM(arma::mat& x, arma::mat& y, arma::rowvec& weights);
RcppExport SEXP Similarity_weightedDistanceCPPNM(SEXP xSEXP, SEXP ySEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::rowvec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(weightedDistanceCPPNM(x, y, weights));
    return rcpp_result_gen;
END_RCPP
}
// proximityMatrixRangerCPP
arma::vec proximityMatrixRangerCPP(arma::mat& x, std::uint32_t nTrees);
RcppExport SEXP Similarity_proximityMatrixRangerCPP(SEXP xSEXP, SEXP nTreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::uint32_t >::type nTrees(nTreesSEXP);
    rcpp_result_gen = Rcpp::wrap(proximityMatrixRangerCPP(x, nTrees));
    return rcpp_result_gen;
END_RCPP
}
// proximityMatrixRangerCPPNM
arma::vec proximityMatrixRangerCPPNM(arma::mat& x, arma::mat& y, std::uint32_t nTrees);
RcppExport SEXP Similarity_proximityMatrixRangerCPPNM(SEXP xSEXP, SEXP ySEXP, SEXP nTreesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::uint32_t >::type nTrees(nTreesSEXP);
    rcpp_result_gen = Rcpp::wrap(proximityMatrixRangerCPPNM(x, y, nTrees));
    return rcpp_result_gen;
END_RCPP
}
// depthMatrixRangerCPP
arma::vec depthMatrixRangerCPP(arma::mat& x, arma::umat& terminalNodeIDs);
RcppExport SEXP Similarity_depthMatrixRangerCPP(SEXP xSEXP, SEXP terminalNodeIDsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::umat& >::type terminalNodeIDs(terminalNodeIDsSEXP);
    rcpp_result_gen = Rcpp::wrap(depthMatrixRangerCPP(x, terminalNodeIDs));
    return rcpp_result_gen;
END_RCPP
}
// terminalNodeDistanceCPP
Rcpp::DataFrame terminalNodeDistanceCPP(arma::umat& nodeIDs);
RcppExport SEXP Similarity_terminalNodeDistanceCPP(SEXP nodeIDsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type nodeIDs(nodeIDsSEXP);
    rcpp_result_gen = Rcpp::wrap(terminalNodeDistanceCPP(nodeIDs));
    return rcpp_result_gen;
END_RCPP
}
// terminalNodeIDRanger
arma::vec terminalNodeIDRanger(arma::mat& x, arma::vec& childNodes1, arma::vec& childNodes2, arma::vec& splitValues, arma::vec& splitVarIds);
RcppExport SEXP Similarity_terminalNodeIDRanger(SEXP xSEXP, SEXP childNodes1SEXP, SEXP childNodes2SEXP, SEXP splitValuesSEXP, SEXP splitVarIdsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type childNodes1(childNodes1SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type childNodes2(childNodes2SEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type splitValues(splitValuesSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type splitVarIds(splitVarIdsSEXP);
    rcpp_result_gen = Rcpp::wrap(terminalNodeIDRanger(x, childNodes1, childNodes2, splitValues, splitVarIds));
    return rcpp_result_gen;
END_RCPP
}
